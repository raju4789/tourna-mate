# docker/ docker-compose.yml
#
# SERVICE STARTUP ORDER:
# 1. Infrastructure: vault → vault-agent → tourni-mysql
# 2. Service Discovery: tourni-discovery-service → tourni-config-server  
# 3. Core Services: tourni-identity-service → tourni-management → tourni-ai
# 4. Gateway & UI: tourni-gateway → tourni-ui
# 5. Observability: prometheus, loki, tempo → grafana
#
# Each service waits for its dependencies to be healthy before starting
# This ensures proper initialization order and prevents startup failures

version: "3.9"

services:
  # ========================================
  # INFRASTRUCTURE LAYER (Startup Order: 1-3)
  # ========================================
  
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_LOG_LEVEL=info
    ports:
      - "8200:8200"
    volumes:
      - vault-data:/vault/data
    command: ["vault", "server", "-dev"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  vault-agent:
    image: hashicorp/vault:latest
    container_name: vault-agent
    environment:
      # Vault connection
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=myroot
      # Environment name
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # Secrets from .env file
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - GRAFANA_PASSWORD=${GRAFANA_PASSWORD}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - vault-secrets:/vault/secrets
      - ./scripts:/scripts:ro
    command: ["sh", "/scripts/init-vault.sh"]
    depends_on:
      vault:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "test -f /vault/secrets/mysql_root_password && test -f /vault/secrets/jwt_secret"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  tourni-mysql:
    container_name: tourni-mysql
    image: mysql:8.0.13
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /vault/secrets/mysql_root_password
      MYSQL_DATABASE: ${MYSQL_DATABASE:-tournament_db}
      MYSQL_USER: ${MYSQL_USER:-tournament_admin}
      MYSQL_PASSWORD_FILE: /vault/secrets/mysql_password
    ports:
      - "3306:3306"
    volumes:
      - mysql-database-data-volume:/var/lib/mysql
      - vault-secrets:/vault/secrets:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p$$(cat /vault/secrets/mysql_root_password)"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      vault-agent:
        condition: service_healthy
    networks:
      - tourni-network
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ========================================
  # SERVICE DISCOVERY & CONFIG LAYER (Startup Order: 4-5)
  # ========================================

  tourni-discovery-service:
    build:
      context: ../
      dockerfile: tourni-discovery-service/Dockerfile
      args:
        SERVICE_DIR: tourni-discovery-service
    container_name: tourni-discovery-service
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-config-server:
    build:
      context: ../
      dockerfile: tourni-config-server/Dockerfile
      args:
        SERVICE_DIR: tourni-config-server
    container_name: tourni-config-server
    ports:
      - "8890:8888"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  # ========================================
  # CORE BUSINESS SERVICES LAYER (Startup Order: 6-8)
  # ========================================

  tourni-identity-service:
    build:
      context: ../
      dockerfile: tourni-identity-service/Dockerfile
      args:
        SERVICE_DIR: tourni-identity-service
    container_name: tourni-identity-service
    ports:
      - "8082:8082"
    environment:
      - JWT_SECRET_FILE=/vault/secrets/jwt_secret
    volumes:
      - vault-secrets:/vault/secrets:ro
    depends_on:
      vault-agent:
        condition: service_healthy
      tourni-mysql:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-management:
    build:
      context: ../
      dockerfile: tourni-management/Dockerfile
      args:
        SERVICE_DIR: tourni-management
    container_name: tourni-management
    ports:
      - "8083:8083"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
      tourni-identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-ai:
    build:
      context: ../
      dockerfile: tourni-ai/Dockerfile
      args:
        SERVICE_DIR: tourni-ai
    container_name: tourni-ai
    ports:
      - "8084:8084"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  # ========================================
  # GATEWAY & UI LAYER (Startup Order: 9-10)
  # ========================================

  tourni-gateway:
    build:
      context: ../
      dockerfile: tourni-gateway/Dockerfile
      args:
        SERVICE_DIR: tourni-gateway
    container_name: tourni-gateway
    ports:
      - "8080:8080"
      - "8091:8091"
    environment:
      MANAGEMENT_SERVER_PORT: 8091
    depends_on:
      tourni-discovery-service:
        condition: service_healthy
      tourni-identity-service:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-management:
        condition: service_healthy
      tourni-ai:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-ui:
    build:
      context: ../tourni-ui
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: tourni-ui
    container_name: tourni-ui
    ports:
      - "8002:8000"
    depends_on:
      tourni-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  # ========================================
  # OBSERVABILITY LAYER (Startup Order: 11-14)
  # ========================================
  
  # Prometheus Service
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    platform: linux/amd64
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    extends:
      file: common-config.yml
      service: tourni-observability-config

  ## Tempo Service
  tempo:
    image: grafana/tempo:2.3.0
    container_name: tempo
    platform: linux/amd64
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ../observability/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo
      - "9411:9411" # zipkin
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    extends:
      file: common-config.yml
      service: tourni-observability-config

  #loki Service
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    platform: linux/amd64
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    extends:
      file: common-config.yml
      service: tourni-observability-config

  # Grafana Service
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    platform: linux/amd64
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana:/etc/grafana/provisioning/datasources:ro
      - vault-secrets:/vault/secrets:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/vault/secrets/grafana_password
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    depends_on:
      vault-agent:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    user: "472:472"  # Grafana user
    extends:
      file: common-config.yml
      service: tourni-observability-config

volumes:
  mysql-database-data-volume:
    driver: local
  vault-data:
    driver: local
  vault-secrets:
    driver: local
  tempo-data:
    driver: local

networks:
  tourni-network:
    driver: bridge
