# docker/ docker-compose.yml

version: "3.9"

services:
  tourni-mysql:
    container_name: tourni-mysql
    image: mysql:8.0.13
    environment:
      MYSQL_ROOT_PASSWORD: Raju@4789
    ports:
      - "3306:3306"
    volumes:
      - mysql-database-data-volume:/var/lib/mysql
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-pRaju@4789"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-discovery-service:
    build:
      context: ../
      dockerfile: tourni-discovery-service/Dockerfile
      args:
        SERVICE_DIR: tourni-discovery-service
    container_name: tourni-discovery-service
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-config-server:
    build:
      context: ../
      dockerfile: tourni-config-server/Dockerfile
      args:
        SERVICE_DIR: tourni-config-server
    container_name: tourni-config-server
    ports:
      - "8890:8888"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-identity-service:
    build:
      context: ../
      dockerfile: tourni-identity-service/Dockerfile
      args:
        SERVICE_DIR: tourni-identity-service
    container_name: tourni-identity-service
    ports:
      - "8082:8082"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-management:
    build:
      context: ../
      dockerfile: tourni-management/Dockerfile
      args:
        SERVICE_DIR: tourni-management
    container_name: tourni-management
    ports:
      - "8083:8083"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
      tourni-identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-ai:
    build:
      context: ../
      dockerfile: tourni-ai/Dockerfile
      args:
        SERVICE_DIR: tourni-ai
    container_name: tourni-ai
    ports:
      - "8084:8084"
    depends_on:
      tourni-mysql:
        condition: service_healthy
      tourni-discovery-service:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-identity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-gateway:
    build:
      context: ../
      dockerfile: tourni-gateway/Dockerfile
      args:
        SERVICE_DIR: tourni-gateway
    container_name: tourni-gateway
    ports:
      - "8080:8080"
      - "8091:8091"
    environment:
      MANAGEMENT_SERVER_PORT: 8091
    depends_on:
      tourni-discovery-service:
        condition: service_healthy
      tourni-identity-service:
        condition: service_healthy
      tourni-config-server:
        condition: service_healthy
      tourni-management:
        condition: service_healthy
      tourni-ai:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/actuator/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-ui:
    build:
      context: ../tourni-ui
      dockerfile: Dockerfile
      args:
        SERVICE_DIR: tourni-ui
    container_name: tourni-ui
    ports:
      - "8002:8000"
    depends_on:
      tourni-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    extends:
      file: common-config.yml
      service: tourni-base-config

  # Prometheus Service
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: tourni-base-config

  ## Tempo Service
  tempo:
    image: grafana/tempo
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ../observability/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo
      - "9411:9411" # zipkin
    extends:
      file: common-config.yml
      service: tourni-base-config

  #loki Service
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    extends:
      file: common-config.yml
      service: tourni-base-config

  # Grafana Service
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    extends:
      file: common-config.yml
      service: tourni-base-config

volumes:
  mysql-database-data-volume:

networks:
  tourni-network:
    driver: bridge