version: '3.7'
services:
  read:
    image: grafana/loki:2.9.2
    container_name: loki-read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      tourni-network:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    container_name: loki-write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - ./promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: tourni-deploy-service


  minio:
    image: minio/minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: tourni-deploy-service

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: tourni-deploy-service

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ./tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: tourni-deploy-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: tourni-deploy-service

  gateway:
    image: nginx:latest
    container_name: gateway
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: tourni-deploy-service

  tourni-mysql:
    container_name: tourni-mysql
    image: mysql:8.0.13
    environment:
      MYSQL_ROOT_PASSWORD: Raju@4789
    ports:
      - "3306:3306"
    volumes:
      - mysql-database-data-volume:/var/lib/mysql
    restart: always
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-config-server:
    image: raju5800/tourni-config-server:latest
    container_name: tourni-config-server
    ports:
      - "8890:8888"
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 30
      start_period: 10s
    depends_on:
      - prometheus
      - tempo
      - grafana
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-discovery-service:
    image: raju5800/tourni-discovery-service:latest
    container_name: tourni-discovery-service
    ports:
      - "8761:8761"
    depends_on:
      - tourni-config-server
      - prometheus
      - tempo
      - grafana
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-identity-service:
    image: raju5800/tourni-identity-service:latest
    container_name: tourni-identity-service
    ports:
      - "8082:8080"
    depends_on:
      - tourni-mysql
      - tourni-config-server
      - tourni-discovery-service
      - prometheus
      - tempo
      - grafana
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 30
      start_period: 10s
    environment:
      EUREKA.CLIENT.FETCH-REGISTRY: true
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-management:
    image: raju5800/tourni-management:latest
    container_name: tourni-management
    ports:
      - "8083:8080"
    depends_on:
      - tourni-mysql
      - tourni-config-server
      - tourni-discovery-service
      - prometheus
      - tempo
      - grafana
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      EUREKA.CLIENT.FETCH-REGISTRY: true
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-ai:
    image: raju5800/tourni-ai:latest
    container_name: tourni-ai
    ports:
      - "8084:8080"
    depends_on:
      - tourni-mysql
      - tourni-discovery-service
      - tourni-config-server
      - prometheus
      - tempo
      - grafana
    healthcheck:
      test: "curl --fail --silent localhost:8084/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 30
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-gateway:
    image: raju5800/tourni-gateway:latest
    container_name: tourni-gateway
    ports:
      - "8080:8080"
      - "8091:8091"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      - tourni-discovery-service
      - tourni-identity-service
      - tourni-config-server
      - tourni-management
      - tourni-ai
    extends:
      file: common-config.yml
      service: tourni-base-config

  tourni-ui:
    image: raju5800/tourni-ui:latest
    container_name: tourni-ui
    ports:
      - "8002:8000"
    depends_on:
      - tourni-gateway
    networks:
      - tourni-network

# Volumes
volumes:
  mysql-database-data-volume:

# Networks
networks:
  tourni-network:
    driver: bridge